#!/usr/bin/env python

"""MangaFox Service code - Want it to gather all info on Manga and retrieve image urls."""

####################################################################################################
def NormalizeURL(url):
    """This function should return a 'normalised' version of the given URL. Plex uses the URL"""

    return url

####################################################################################################
def MetadataObjectForURL(url):
    """
    This function should create and return a metadata object (for example, a VideoClipOb-
    ject) and populate it with metadata from the given URL. Only the metadata should be
    added here - the object's key and rating_key properties will be synthesised based on the URL.
    """

    album = PhotoAlbumObject(key=Callback(GetPhotos, url=url))
    return album

####################################################################################################
def MediaObjectsForURL(url):
    """
    This function should create and return a list of media objects and part objects representing
    the media available at the given URL. Callbacks may be used if obtaining the final media
    location requires additional computation.
    """

    return [MediaObject(
        parts=Callback(GetPhotos, url=url)
        )]

####################################################################################################
#@indirect
def GetPhotos(url):
    """
    This function pulls down all the image urls for a chapter and adds them to the
    'PhotoObject' container.
    """

    oc = ObjectContainer()

    raw = HTTP.Request(url).content
    pages = int(Regex('of (\d+)').search(raw).group(1))
    token = url.rsplit('/', 1)
    for page in range(1, pages + 1):
        page_url = token[0] + '/%d.html' % page
        raw = HTTP.Request(page_url).content
        img_url = Regex("onerror=\"this.src='([^']*)'\"").search(raw).group(1)
        oc.add(PhotoObject(key=img_url, title=str(page), thumb=None))

    return oc
